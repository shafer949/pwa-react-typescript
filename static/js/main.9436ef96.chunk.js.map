{"version":3,"sources":["images/pexels-sharon-mccutcheon.jpg","components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9436ef96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pexels-sharon-mccutcheon.97c94797.jpg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import {shuffleArray} from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\n//use the above question type and add answers to it to make a new type\r\nexport type QuestionsState = Question & {answers:string[]}\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    //await fetch itself and then await the convert to json\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results?.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([\r\n            ...question.incorrect_answers, \r\n            question.correct_answer\r\n        ]),\r\n    }));\r\n};","import React from \"react\";\r\nimport {AnswerObject} from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNumber: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNumber,\r\n    totalQuestions\r\n}) => (\r\n    <Wrapper>\r\n        <p className='number'>\r\n            Question: {questionNumber} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{__html: question}}/>\r\n        <div>\r\n            {\r\n            //using !! converts value to true or false    \r\n            answers.map((answer) => (\r\n                <ButtonWrapper\r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{__html: answer}}/>\r\n                    </button>\r\n                </ButtonWrapper>     \r\n            ))}\r\n        </div>\r\n     </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","export const shuffleArray = (array:any[]) => \r\n[...array].sort(() => Math.random() - 0.5);","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/pexels-sharon-mccutcheon.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #f21414;\r\n  }\r\n\r\n  .score {\r\n    color: #f21414;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #0175cc);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #1f0161);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 100px 20px 20px;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #a784ea);\r\n    border: 2px solid #21015c;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;","\r\nimport React, {useState} from \"react\";\r\nimport QuestionCard from './components/QuestionCard';\r\nimport {fetchQuizQuestions} from './API';\r\nimport {Difficulty, QuestionsState} from './API'\r\nimport {GlobalStyle, Wrapper} from './App.styles';\r\n\r\n/*\r\nimport React, { lazy, Suspense } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nconst About = lazy(() => import('./About'));\r\nconst Home = lazy(() => import('./Home'));\r\n\r\n A good way to improve loading times for PWAs is to ensure that the code is not built into big files. \r\n\r\n This (above About & Home variables) is the syntax to lazily load components in React. You’ll note that it internally uses the \r\n dynamic import() syntax, which webpack uses as a “split point.”\r\n\r\n The <Suspense> component will render the <div>Loading...</div> while it waits for a route’s code to be dynamically loaded. \r\n This ensures that users load files as they need to and that those files should not be too large — great performance that \r\n will scale.\r\n\r\n Before code split:\r\n    47.42 KB  build\\static\\js\\2.b0d049fb.chunk.js     \r\n    1.07 KB   build\\static\\js\\main.9d920572.chunk.js  \r\n    784 B     build\\static\\js\\runtime-main.f4c23f94.js\r\n    278 B     build\\static\\css\\main.5ecd60fb.chunk.css\r\n\r\n\r\n After code split\"\r\n    47.42 KB          build\\static\\js\\2.b0d049fb.chunk.js\r\n    1.18 KB (+429 B)  build\\static\\js\\runtime-main.b1fa35d4.js\r\n    1.11 KB (+40 B)   build\\static\\js\\main.ace14394.chunk.js\r\n    278 B             build\\static\\css\\main.5ecd60fb.chunk.css\r\n    233 B             build\\static\\js\\4.b341bc01.chunk.js\r\n    229 B             build\\static\\js\\3.b8b1d755.chunk.js\r\n\r\n    const App: React.FC = () => (\r\n  <Router>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <Switch>\r\n      <Route path=\"/about\">\r\n        <About />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Home />\r\n      </Route>\r\n    </Switch>\r\n    </Suspense>\r\n  </Router>\r\n);\r\n*/\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport type AnswerObject = {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n}\r\n\r\nconst App = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [questions, setQuestions] = useState<QuestionsState[]>([]);\r\n    const [number, setNumber] = useState(0);\r\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n    const [score, setScore] = useState(0);\r\n    const [gameOver, setGameOver]= useState(true);\r\n\r\n    const startTrivia = async () => {\r\n        setLoading(true);\r\n        setGameOver(false);\r\n\r\n        const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\r\n\r\n        setQuestions(newQuestions);\r\n        setScore(0);\r\n        setUserAnswers([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    };\r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        if(!gameOver) {\r\n            const answer = e.currentTarget.value;\r\n            //check answer against correct answer\r\n            const correct = questions[number].correct_answer === answer;\r\n            //add score if answer is correct\r\n            if(correct) {\r\n                setScore((prev) => prev + 1);\r\n            }\r\n            //save answer in the array for user answers\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer,\r\n            }\r\n            setUserAnswers((prev) => [...prev, answerObject]);\r\n        }\r\n    };\r\n\r\n    const nextQuestion = () => {\r\n        //move to next question if not the last question\r\n        const nextQuestion = number + 1;\r\n\r\n        if(nextQuestion === TOTAL_QUESTIONS) {\r\n            setGameOver(true);\r\n        } else{\r\n            setNumber(nextQuestion);\r\n        }\r\n    };\r\n\r\n    return( \r\n        <> \r\n        <GlobalStyle/>\r\n        <Wrapper>\r\n            <h1>React Quiz</h1>\r\n            {\r\n                gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                    <button className='start' onClick={startTrivia}>Start</button>\r\n                ) : null\r\n            }\r\n            {\r\n                !gameOver ? <p className='score'>Score: {score}</p> : null\r\n            }\r\n            {\r\n                loading && <p>Loading Questions ...</p>//short circuit\r\n            }\r\n            {\r\n                !loading && !gameOver && (\r\n                    <QuestionCard\r\n                        questionNumber={number + 1}\r\n                        totalQuestions={TOTAL_QUESTIONS}\r\n                        question={questions[number].question}\r\n                        answers={questions[number].answers}\r\n                        userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n                        callback={checkAnswer}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\r\n                    <button className='next' onClick={nextQuestion}>Next Question</button>\r\n                ) : null\r\n            }\r\n        </Wrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n/*\r\nAll static site assets are cached so that your page loads fast on subsequent visits, \r\nregardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.\r\n\r\nYour app will work regardless of network state, even if offline. \r\nThis means your users will be able to use your app at 10,000 feet and on the subway.\r\n\r\n… It will take care of generating a service worker file that will automatically precache all \r\nof your local assets and keep them up to date as you deploy updates. The service worker will \r\nuse a cache-first strategy for handling all requests for local assets, including navigation \r\nrequests for your HTML, ensuring that your web app is consistently fast, even on a slow or unreliable network.\r\n*/"],"sourceRoot":""}